name: "Pull Request"
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
      changedCharts: ${{ steps.list-changed.outputs.changedCharts }}
    steps:
      - name: Setup Helm
        uses: Azure/setup-helm@v4.3.1

      - name: Checkout pull request branch
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: 3.x

      - name: Set up chart-testing-action
        uses: helm/chart-testing-action@v2.7.0

      - name: Get changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "Changed charts:"
            echo "$changed"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo 'changedCharts<<EOF' >> $GITHUB_OUTPUT
            echo $changed >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          else
            echo "No chart changes detected"
          fi

      - name: Installing plugin helm-unittest
        if: steps.list-changed.outputs.changed == 'true'
        run: helm plugin install https://github.com/helm-unittest/helm-unittest >/dev/null

      - name: Run chart testing (lint & unittest)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --validate-maintainers=false --additional-commands "helm unittest {{ .Path }}"

      - name: Install helm-docs
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          cd /tmp
          curl -sSL https://github.com/norwoodj/helm-docs/releases/download/v1.14.2/helm-docs_1.14.2_Linux_x86_64.tar.gz | tar xz
          sudo mv helm-docs /usr/local/bin/helm-docs

      - name: Generate values documentation
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          # Create a script to update only the values tables
          cat > update_values.py << 'EOF'
          import os
          import sys
          import subprocess
          import re
          import tempfile

          def update_chart_values(chart_path):
              readme_path = os.path.join(chart_path, "README.md")

              if not os.path.exists(readme_path):
                  print(f"README.md not found in {chart_path}, skipping...")
                  return False

              # Generate helm-docs output to get values table
              with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as tmp:
                  tmp.write('{{ template "chart.valuesSection" . }}')
                  template_file = tmp.name

              try:
                  result = subprocess.run([
                      'helm-docs',
                      '--template-files', template_file,
                      '--output-file', '/tmp/values_output.md'
                  ], capture_output=True, text=True, cwd=chart_path)

                  if result.returncode != 0:
                      print(f"helm-docs failed for {chart_path}: {result.stderr}")
                      return False

                  # Read the generated values section
                  with open('/tmp/values_output.md', 'r') as f:
                      new_values_content = f.read().strip()

                  # Read existing README
                  with open(readme_path, 'r') as f:
                      content = f.read()

                  # Find Configuration section and replace everything until next ## section
                  config_pattern = r'(## Configuration\s*\n)(.*?)(?=\n## [^#]|\Z)'
                  if re.search(config_pattern, content, re.DOTALL):
                      updated_content = re.sub(
                          config_pattern,
                          rf'\1\n{new_values_content}\n\n',
                          content,
                          flags=re.DOTALL
                      )

                      # Write back only if changed
                      if updated_content != content:
                          with open(readme_path, 'w') as f:
                              f.write(updated_content)
                          print(f"Updated values table in {readme_path}")
                          return True
                  else:
                      print(f"No Configuration section found in {readme_path}")

              finally:
                  os.unlink(template_file)
                  if os.path.exists('/tmp/values_output.md'):
                      os.unlink('/tmp/values_output.md')

              return False

          # Process each chart
          charts_changed = os.environ.get('CHANGED_CHARTS', '').split()
          any_changes = False

          for chart in charts_changed:
              if update_chart_values(chart.strip()):
                  any_changes = True

          # Exit with status code to indicate if changes were made
          sys.exit(0 if any_changes else 1)
          EOF

          # Run the Python script
          CHANGED_CHARTS="${{ steps.list-changed.outputs.changedCharts }}" python3 update_values.py
          VALUES_UPDATED=$?
          echo "values_updated=$VALUES_UPDATED" >> $GITHUB_OUTPUT
        id: update-values

      - name: Check for documentation changes
        if: steps.list-changed.outputs.changed == 'true'
        id: doc-changes
        run: |
          if git diff --quiet; then
            echo "No documentation changes detected"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Documentation changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
            git diff --name-only
          fi

      - name: Commit documentation changes
        if: steps.list-changed.outputs.changed == 'true' && steps.doc-changes.outputs.changes == 'true'
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add charts/*/README.md
          git commit -m "docs: auto-update chart values documentation with helm-docs" --signoff
          git push

  update-changelog:
    runs-on: ubuntu-latest
    needs: [lint-test]
    name: Automatically update CHANGELOG
    permissions:
      contents: write
    if: needs.lint-test.outputs.changed == 'true'
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate changelog
        id: generate-changelog
        env:
          PULL_REQUEST_NUMBER: "${{ github.event.pull_request.number }}"
          PULL_REQUEST_URL: "${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }}"
          GITHUB_TOKEN: "${{ github.token }}"
          CHANGED_CHARTS: ${{ needs.lint-test.outputs.changedCharts }}
        run: |
          PR_TITLE="$(gh api "/repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}" | jq -r '.title')"
          for chart_directory in ${CHANGED_CHARTS}; do
            CHART_NAME=${chart_directory#charts/}
            echo "Updating CHANGELOG for chart $CHART_NAME"

            # Extract version from Chart.yaml
            CHART_VERSION=$(yq eval '.version' "${GITHUB_WORKSPACE}/charts/${CHART_NAME}/Chart.yaml")
            CHANGELOG_FILE="${GITHUB_WORKSPACE}/charts/${CHART_NAME}/CHANGELOG.md"
            CHANGELOG_TMP_FILE="${GITHUB_WORKSPACE}/charts/${CHART_NAME}/CHANGELOG.md.tmp"

            touch "$CHANGELOG_FILE"

            # Generate new CHANGELOG.md
            npx conventional-changelog-cli -i "$CHANGELOG_FILE" -s -t "${CHART_NAME}-" -r 0 --commit-path "charts/${CHART_NAME}"
            
            # Remove unreleased section (includes all intermediate commits in the branch) and create future entry based on PR title
            # The unreleased section looks like this "## (YYYY-MM-DD)" whereas a released section looks like this "## 0.0.1 (YYYY-MM-DD)"
            # So we only need to find a released section to start printing in the awk script below
            awk '/^##[^(]*[0-9]/ {flag=1} flag {print}' "$CHANGELOG_FILE" > "$CHANGELOG_TMP_FILE"

            # Remove chart name prefixes from commit messages
            sed -i -E "s/\* \[${CHART_NAME}\] /\* /gi" "$CHANGELOG_TMP_FILE"
            sed -i -E "s/\* \[$(echo ${CHART_NAME} | tr '[:lower:]' '[:upper:]')\] /\* /g" "$CHANGELOG_TMP_FILE"

            # Remove extra newlines so the changelog file passes the markdown linter
            sed -i -E -e '/^$/d' "$CHANGELOG_TMP_FILE" && sed -i -E -e 's/(##.*)/\n\1\n/g' "$CHANGELOG_TMP_FILE"
            
            # Include h1 heading and add entry for the current version. There is no tag for the current version (this will be created once merged), so we need to manually add it.
            # We know the final squashed commit title, which will be the PR title. We cannot add a link to the commit in the main branch because it has not been
            # merged yet (this will be corrected once a new version regenerates the changelog). Instead, we add the PR url which contains the exact same information.
            echo -e -n "# Changelog\n\n## $CHART_VERSION ($(date +'%Y-%m-%d'))\n\n* ${PR_TITLE} ([#${PULL_REQUEST_NUMBER}](${PULL_REQUEST_URL}))\n" > "$CHANGELOG_FILE"

            cat "$CHANGELOG_TMP_FILE" >> "$CHANGELOG_FILE"
            rm "$CHANGELOG_TMP_FILE"
            
            # Commit all changes, if any
            if git status -s | grep "charts/${CHART_NAME}/CHANGELOG.md"; then
              git add "charts/${CHART_NAME}/CHANGELOG.md"
              git commit -m "Update CHANGELOG.md" --signoff
            fi
          done

      - name: Push all changes
        run: |
          cd $GITHUB_WORKSPACE/charts
          # Push all the new commits, if any
          if [[ $(git cherry -v) ]]; then
            git push
          else
            echo "No changed CHANGELOGS, skip push"
          fi
