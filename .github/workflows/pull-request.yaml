name: "Pull Request"

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
      changedCharts: ${{ steps.list-changed.outputs.changedCharts }}
    steps:
      - name: Setup Helm
        uses: Azure/setup-helm@v4.3.1

      - name: Checkout pull request branch
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: 3.x

      - name: Set up chart-testing-action
        uses: helm/chart-testing-action@v2.7.0

      - name: Get changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "Changed charts:"
            echo "$changed"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo 'changedCharts<<EOF' >> $GITHUB_OUTPUT
            echo $changed >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          else
            echo "No chart changes detected"
          fi

      - name: Installing plugin helm-unittest
        if: steps.list-changed.outputs.changed == 'true'
        run: helm plugin install https://github.com/helm-unittest/helm-unittest >/dev/null

      - name: Run chart testing (lint & unittest)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --validate-maintainers=false --additional-commands "helm unittest {{ .Path }}"

      - name: Install helm-docs
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          cd /tmp
          curl -sSL https://github.com/norwoodj/helm-docs/releases/download/v1.14.2/helm-docs_1.14.2_Linux_x86_64.tar.gz | tar xz
          sudo mv helm-docs /usr/local/bin/helm-docs

      - name: Generate values documentation
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          for chart_directory in ${{ steps.list-changed.outputs.changedCharts }}; do
            echo "Processing chart: $chart_directory"
            if [[ ! -f "$chart_directory/README.md" ]]; then
              echo "README.md not found in $chart_directory, skipping..."
              continue
            fi
            echo '{{ template "chart.valuesSection" . }}' > "$chart_directory/values_template.md.gotmpl"
            cd "$chart_directory"
            if helm-docs --template-files=values_template.md.gotmpl --output-file=values_output.md; then
              if [[ -f "values_output.md" ]]; then
                python3 << 'EOF'
import re
with open('values_output.md', 'r') as f:
    new_values_content = f.read().strip()
with open('README.md', 'r') as f:
    content = f.read()
config_pattern = r'(## Configuration\s*\n)(.*?)(?=\n## [^#]|\Z)'
if re.search(config_pattern, content, re.DOTALL):
    updated_content = re.sub(config_pattern, rf'\1\n{new_values_content}\n\n', content, flags=re.DOTALL)
    if updated_content != content:
        with open('README.md', 'w') as f:
            f.write(updated_content)
        print('Updated values table in README.md')
    else:
        print('No changes needed')
else:
    print('No Configuration section found in README.md')
EOF
                rm -f values_output.md values_template.md.gotmpl
              else
                echo "helm-docs did not generate output file"
              fi
            else
              echo "helm-docs failed for $chart_directory"
            fi
            cd "$GITHUB_WORKSPACE"
          done
        id: update-values

      - name: Check for documentation changes
        if: steps.list-changed.outputs.changed == 'true'
        id: doc-changes
        run: |
          if git diff --quiet; then
            echo "No documentation changes detected"
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "Documentation changes detected"
            echo "changes=true" >> $GITHUB_OUTPUT
            git diff --name-only
          fi

      - name: Commit documentation changes
        if: steps.list-changed.outputs.changed == 'true' && steps.doc-changes.outputs.changes == 'true'
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add charts/*/README.md
          git commit -m "docs: auto-update chart values documentation with helm-docs" --signoff
          git push

  update-changelog:
    name: Automatically update CHANGELOG
    runs-on: ubuntu-latest
    needs: [lint-test]
    permissions:
      contents: write
    if: needs.lint-test.outputs.changed == 'true'
    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ github.head_ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Fetch tags
        run: git fetch --tags

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate changelog
        id: generate-changelog
        env:
          PULL_REQUEST_NUMBER: "${{ github.event.pull_request.number }}"
          PULL_REQUEST_URL: "${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          GITHUB_TOKEN: "${{ github.token }}"
          CHANGED_CHARTS: ${{ needs.lint-test.outputs.changedCharts }}
        run: |
          PR_TITLE="$(gh api "/repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}" | jq -r '.title')"
          for chart_directory in ${CHANGED_CHARTS}; do
            CHART_NAME=${chart_directory#charts/}
            echo "Updating CHANGELOG for chart $CHART_NAME"

            CHART_VERSION=$(yq eval '.version' "${GITHUB_WORKSPACE}/charts/${CHART_NAME}/Chart.yaml")
            CHANGELOG_FILE="${GITHUB_WORKSPACE}/charts/${CHART_NAME}/CHANGELOG.md"
            CHANGELOG_TMP_FILE="${GITHUB_WORKSPACE}/charts/${CHART_NAME}/CHANGELOG.md.tmp"

            touch "$CHANGELOG_FILE"

            npx conventional-changelog-cli -i "$CHANGELOG_FILE" -s -t "${CHART_NAME}-" -r 0 --commit-path "charts/${CHART_NAME}"
            
            awk '/^##[^(]*[0-9]/ {flag=1} flag {print}' "$CHANGELOG_FILE" > "$CHANGELOG_TMP_FILE"

            sed -i -E "s/\* \[${CHART_NAME}\] /\* /gi" "$CHANGELOG_TMP_FILE"
            sed -i -E "s/\* \[$(echo ${CHART_NAME} | tr '[:lower:]' '[:upper:]')\] /\* /g" "$CHANGELOG_TMP_FILE"

            sed -i -E -e '/^$/d' "$CHANGELOG_TMP_FILE" && sed -i -E -e 's/(##.*)/\n\1\n/g' "$CHANGELOG_TMP_FILE"
            
            echo -e -n "# Changelog\n\n## $CHART_VERSION ($(date +'%Y-%m-%d'))\n\n* ${PR_TITLE} ([#${PULL_REQUEST_NUMBER}](${PULL_REQUEST_URL}))\n" > "$CHANGELOG_FILE"

            cat "$CHANGELOG_TMP_FILE" >> "$CHANGELOG_FILE"
            rm "$CHANGELOG_TMP_FILE"
            
            if git status -s | grep "charts/${CHART_NAME}/CHANGELOG.md"; then
              git add "charts/${CHART_NAME}/CHANGELOG.md"
              git commit -m "Update CHANGELOG.md" --signoff
            fi
          done

      - name: Push all changes
        run: |
          cd $GITHUB_WORKSPACE/charts
          if [[ $(git cherry -v) ]]; then
            git push
          else
            echo "No changed CHANGELOGS, skip push"
          fi
