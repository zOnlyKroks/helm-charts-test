## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker Image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters
## @param nameOverride String to partially override rabbitmq.fullname
nameOverride: ""
## @param fullnameOverride String to fully override rabbitmq.fullname
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @section RabbitMQ image parameters
image:
  ## @param image.registry RabbitMQ image registry
  registry: docker.io
  ## @param image.repository RabbitMQ image repository
  repository: rabbitmq
  ## @param image.tag RabbitMQ image tag
  tag: "4.1.4-management@sha256:06f418f2f0a96e5262844351195b83f47655c193cd74c2b5072898147492d6cf"
  ## @param image.imagePullPolicy RabbitMQ image pull policy
  imagePullPolicy: Always

## @param clusterDomain Kubernetes cluster domain
clusterDomain: cluster.local

## @section Deployment configuration
## @param replicaCount Number of RabbitMQ replicas to deploy (clustering needs to be enabled to set more than 1 replicas)
replicaCount: 1

## @section Service configuration
service:
  ## @param service.type Kubernetes service type
  type: ClusterIP
  ## @param service.amqpPort RabbitMQ AMQP service port
  amqpPort: 5672
  ## @param service.managementPort RabbitMQ management UI port
  managementPort: 15672
  ## @param service.epmdPort RabbitMQ EPMD port
  epmdPort: 4369
  ## @param service.distPort RabbitMQ distribution port
  distPort: 25672

## @section RabbitMQ Authentication
auth:
  ## @param auth.enabled Enable RabbitMQ authentication
  enabled: true
  ## @param auth.username RabbitMQ default username
  username: admin
  ## @param auth.password RabbitMQ password (if empty, random password will be generated)
  password: ""
  ## @param auth.erlangCookie Erlang cookie for clustering (if empty, random cookie will be generated)
  erlangCookie: ""
  ## @param auth.existingSecret Name of existing secret containing RabbitMQ credentials
  existingSecret: ""
  ## @param auth.existingPasswordKey Key in existing secret containing RabbitMQ password
  existingPasswordKey: "password"
  ## @param auth.existingErlangCookieKey Key in existing secret containing Erlang cookie
  existingErlangCookieKey: "erlang-cookie"

## @section RabbitMQ configuration
config:
  ## The memory threshold under which RabbitMQ will stop reading from client network sockets, in order to avoid being killed by the OS
  ## ref: https://www.rabbitmq.com/alarms.html
  ## ref: https://www.rabbitmq.com/memory.html#threshold
  ##
  memoryHighWatermark:
    ## @param memoryHighWatermark.enabled Enable configuring Memory high watermark on RabbitMQ
    ##
    enabled: false
    ## @param memoryHighWatermark.type Memory high watermark type. Either `absolute` or `relative`
    ##
    type: "relative"
    ## Memory high watermark value.
    ## @param memoryHighWatermark.value Memory high watermark value
    ## The default value of 0.4 stands for 40% of available RAM
    ## Note: the memory relative limit is applied to the resourcesPreset memory limit or the resource.limits.memory to calculate the memory threshold
    ## You can also use an absolute value, e.g.: 256Mi
    ##
    value: 0.4
  ## @param config.extraConfiguration Additional RabbitMQ configuration
  extraConfiguration: ""
  ## @param config.advancedConfiguration Advanced RabbitMQ configuration
  advancedConfiguration: ""

## @section PeerDiscoveryK8sPlugin configuration
peerDiscoveryK8sPlugin:
  ## @param peerDiscoveryK8sPlugin.enabled Enable K8s peer discovery plugin for a RabbitMQ HA-cluster
  enabled: false
  ## @param peerDiscoveryK8sPlugin.useLongname Uses the FQDN as connection string (RABBITMQ_USE_LONGNAME)
  useLongname: true
  ## @param peerDiscoveryK8sPlugin.addressType Peer discovery plugin address type
  addressType: hostname

## @section ManagementPlugin configuration
managementPlugin:
  ## @param managementPlugin.enabled Enable RabbitMQ management plugin
  enabled: true

## @section Metrics configuration
metrics:
  ## @param metrics.enabled Enable RabbitMQ metrics (via prometheus plugin)
  enabled: false
  ## @param metrics.port RabbitMQ metrics port
  port: 15692
  ## @param metrics.serviceMonitor.enabled Create ServiceMonitor for Prometheus monitoring
  serviceMonitor:
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace for ServiceMonitor
    namespace: ""
    ## @param metrics.serviceMonitor.labels Labels for ServiceMonitor
    labels: {}
    ## @param metrics.serviceMonitor.annotations Annotations for ServiceMonitor
    annotations: {}
    ## @param metrics.serviceMonitor.interval Scrape interval
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout Scrape timeout
    scrapeTimeout: 10s

## @param additionalPlugins Additional RabbitMQ plugins to enable (Prometheus Metrics, PeerDiscoveryK8s and Management plugins are automatically added)
additionalPlugins: []

## @section Persistence
persistence:
  ## @param persistence.enabled Enable persistent storage
  enabled: true
  ## @param persistence.storageClass Storage class to use for persistent volume
  storageClass: ""
  ## @param persistence.accessModes Persistent Volume access modes
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of persistent volume
  size: 8Gi
  ## @param persistence.annotations Annotations for persistent volume claims
  annotations: {}

## @section Ingress configuration
ingress:
  ## @param ingress.enabled Enable ingress for RabbitMQ management
  enabled: false
  ## @param ingress.className Ingress class name
  className: ""
  ## @param ingress.annotations Ingress annotations
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ## @param ingress.hosts Ingress hosts configuration
  hosts:
    - host: rabbitmq.local
      paths:
        - path: /
          pathType: Prefix
  ## @param ingress.tls Ingress TLS configuration
  tls: []

## @section Resources
## @param resources Resource limits and requests for RabbitMQ pods
resources:
  {}
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: 2Gi
  # requests:
  #   cpu: 100m
  #   memory: 1Gi

## @section Node Selection
## @param nodeSelector Node labels for pod assignment
nodeSelector: {}

## @param tolerations Toleration labels for pod assignment
tolerations: []

## @param affinity Affinity settings for pod assignment
affinity: {}

securityContext:
  ## @param securityContext.allowPrivilegeEscalation Enable container privilege escalation
  allowPrivilegeEscalation: false
  ## @param securityContext.runAsNonRoot Configure the container to run as a non-root user
  runAsNonRoot: true
  ## @param securityContext.runAsUser User ID for the RabbitMQ container
  runAsUser: 999
  ## @param securityContext.runAsGroup Group ID for the RabbitMQ container
  runAsGroup: 999
  ## @param securityContext.readOnlyRootFilesystem Mount container root filesystem as read-only
  readOnlyRootFilesystem: true
  ## @param securityContext.capabilities.drop Linux capabilities to be dropped
  capabilities:
    drop:
      - ALL

## @section Security Context
podSecurityContext:
  ## @param podSecurityContext.fsGroup Group ID for the volumes of the pod
  fsGroup: 999

## @section Liveness and readiness probes
livenessProbe:
  ## @param livenessProbe.enabled Enable livenessProbe on RabbitMQ containers
  enabled: true
  ## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  initialDelaySeconds: 120
  ## @param livenessProbe.periodSeconds Period seconds for livenessProbe
  periodSeconds: 30
  ## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  timeoutSeconds: 20
  ## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
  failureThreshold: 3
  ## @param livenessProbe.successThreshold Success threshold for livenessProbe
  successThreshold: 1

readinessProbe:
  ## @param readinessProbe.enabled Enable readinessProbe on RabbitMQ containers
  enabled: true
  ## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  initialDelaySeconds: 0
  ## @param readinessProbe.periodSeconds Period seconds for readinessProbe
  periodSeconds: 10
  ## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  timeoutSeconds: 5
  ## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
  failureThreshold: 1
  ## @param readinessProbe.successThreshold Success threshold for readinessProbe
  successThreshold: 1

## @param extraEnv Additional environment variables to set
extraEnv: []
# - name: EXTRA_VAR
#   value: "extra_value"

## @param extraVolumes Additional volumes to add to the pod
extraVolumes: []

## @param extraVolumeMounts Additional volume mounts to add to the RabbitMQ container
extraVolumeMounts: []

## @param extraObjects Array of extra objects to deploy with the release
extraObjects: []
